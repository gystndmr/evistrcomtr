  private object Send_post(PostData post_data)
        {

            object Result;

            post_data.merchantId = "1100002537";
            var parameters = new Dictionary<string, object>
            {
                {"merchantId", post_data.merchantId},
                {"orderRef", post_data.orderId},
                {"amount", post_data.orderPrice },
                {"currency", post_data.currency},
                {"cancelUrl", post_data.callbackFailUrl},
                {"callbackUrl", post_data.callbackOkUrl},
                {"notificationUrl", post_data.callbackOkUrl},
                {"errorUrl", post_data.callbackFailUrl},
                {"orderDescription", post_data.productName},
                {"paymentMethod", "ALL"},
                {"feeBySeller", "0"},
                {"billingStreet2", ""},
                {"metadata", "{\"key\":\"value\"}"},
                {"transactionDocuments", "{\"key\":\"value\"}"},
                {"brandName", ""},
                {"colorMode", "default-mode"},
                {"logoSource", ""},
                {"connectionMode", "API"}
            };
            // İsteğe bağlı alanlar - varsa ekle
            if (!string.IsNullOrWhiteSpace(post_data.buyerName))
                parameters["billingFirstName"] = post_data.buyerName;
            if (!string.IsNullOrWhiteSpace(post_data.buyerSurName))
                parameters["billingLastName"] = post_data.buyerSurName;
            if (!string.IsNullOrWhiteSpace(post_data.buyerMail))
                parameters["billingEmail"] = post_data.buyerMail;
            if (!string.IsNullOrWhiteSpace(post_data.buyerCountry))
            {
                string countryCode = post_data.buyerCountry;
                if (CountryNameToCode.TryGetValue(post_data.buyerCountry.Trim(), out var code))
                    countryCode = code;
                parameters["billingCountry"] = countryCode;
            }
            if (!string.IsNullOrWhiteSpace(post_data.buyerCity))
                parameters["billingCity"] = post_data.buyerCity;
            if (!string.IsNullOrWhiteSpace(post_data.buyerAdress))
                parameters["billingStreet1"] = post_data.buyerAdress.Replace("\r\n", " ").Replace("\n", " ");
            var sorted = parameters.OrderBy(x => x.Key, StringComparer.Ordinal)
            .ToDictionary(x => x.Key, x => x.Value.ToString().Trim());

            var json = JsonConvert.SerializeObject(sorted, new JsonSerializerSettings
            {
                StringEscapeHandling = StringEscapeHandling.EscapeNonAscii,
                Formatting = Formatting.None
            }).Replace("/", "\\/");

            string signature = GenerateSignature(json, GPayPrivateKeyPem);
            bool isVerified = VerifySignature(json, signature, GPayPublicKeyPem);
            sorted.Add("signature", signature);
            NameValueCollection data = new NameValueCollection();

            foreach (var item in sorted)
                data[item.Key] = item.Value.ToString();

            using (WebClient client = new WebClient())
            {
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                //client.Headers.Add("Referer", post_data.referer);
                client.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
                byte[] uploadresult = client.UploadValues(Api_URL, "POST", data);
                Result = Encoding.UTF8.GetString(uploadresult);
            }



            return Result;
        }


        private string GenerateSignature(string jsonData, string privateKeyPem)
        {
            using (var rsa = RSA.Create())
            {
                // PEM formatındaki anahtarı yükle
                var privateKey = PemToPrivateKey(privateKeyPem);
                rsa.ImportPkcs8PrivateKey(privateKey, out _);
                var dataBytes = Encoding.UTF8.GetBytes(jsonData);
                var signatureBytes = rsa.SignData(dataBytes, HashAlgorithmName.MD5, RSASignaturePadding.Pkcs1);
                return Convert.ToBase64String(signatureBytes);
            }
        }

        private byte[] PemToPrivateKey(string pem)
        {
            var lines = pem.Split('\n');
            var base64 = string.Join("", lines.Where(l => !l.StartsWith("-")));
            return Convert.FromBase64String(base64);
        }

        private const string GPayPrivateKeyPem = @"-----BEGIN PRIVATE KEY-----
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
DjPZy1LIdNVuY5gNsPweK2KBzJGc
-----END PRIVATE KEY-----";
        public static bool VerifySignature(string jsonData, string signatureBase64, string publicKeyPem)
        {
            using (var rsa = RSA.Create())
            {
                var publicKey = PemToPublicKey(publicKeyPem);
                rsa.ImportSubjectPublicKeyInfo(publicKey, out _);
                var dataBytes = Encoding.UTF8.GetBytes(jsonData);
                var signatureBytes = Convert.FromBase64String(signatureBase64);
                return rsa.VerifyData(dataBytes, signatureBytes, HashAlgorithmName.MD5, RSASignaturePadding.Pkcs1);
            }
        }

        private static byte[] PemToPublicKey(string pem)
        {
            var lines = pem.Split('\n');
            var base64 = string.Join("", lines.Where(l => !l.StartsWith("-")).Select(l => l.Trim()));
            return Convert.FromBase64String(base64);
        }

        private const string GPayPublicKeyPem = @"-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1tpp6AxHhhgdHqF2VYL7
FpH6nZIOO0fsyyksVE389xVcABZ6VzxF2v/tpDd8FfP9mT8C0duMGG/edTkCadCy
FQvU4UBYoqRuH8KENMZs9QdQYMAPK/OFSUs5ISlndTfv2G4mcgPmOtJmNJoJ+DKe
MnXE7vKM5cdauiGd/4m3CuLSRE2c8Oqa1uqEzULbu6b1odLhLgO61qH/NpCI5F2W
/144BlHiLC5Gxv/msdFcBHG/XzJOIpWlFmvicRNCwCI3tSbvCKp6l5zbMHMx95we
fJUoi4cAwW1iKdtT48GrknCUJ0gSPFtFc/P7GfaQP3fNdl81cwk96pkR6P8BKXuV
e8yquYD4aS6QzUMcZ1qG5ndsEfUkYtBYIlNE5RvTahqPrQyFcE/y/H52/o7nCcnq
TUI96tfp6ZrHM2r79ZTSH+/mt0lpynaORL9Vi2P+usshgtABGYD+fEsbXzrxd+mz
8i4Cak7xtcR2w0RZEfCHtkkQu3lKED+5DGB6Qu5g/zczuXcdthDXqc1qtXHFmbEz
YmJR1WpH7LcGsgAyOjQtX5Kk1qR8PgGeVfi3mzeNYijtdYfGsTEiuhVDqtvnC2YX
nL3XXpuyAJMDV6ZfQ5w2cr70+Re8QqiwfIMtFFCJQPEz085WZl3d/qQTg/5KGjw9
7X//Lnsd05V8HBAVpAnw4fECAwEAAQ==
-----END PUBLIC KEY-----";
    }
